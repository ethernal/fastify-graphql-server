// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  login    String  @unique
  password String?

  createdAt      DateTime?       @default(now())
  modifiedAt     DateTime?
  profiles       Profile[]
  userData       PersonalData?
  socialProfiles SocialProfile[]
  contactList    ContactData[]
  locationList   Location[]
  references     Reference[]
}

model PersonalData {
  id         String  @id @unique @default(cuid())
  photo      String?
  firstName  String
  middleName String?
  lastName   String
  summary    String?
  userId     String
  user       User?   @relation(fields: [userId], references: [id])
}

model Profile {
  id                 String          @id @unique @default(cuid())
  // this is for external world to see.. ex. Position applied for
  profileNamePublic  String
  // this is for the user to differenciate profiles created
  profileNamePrivate String
  userId             String
  user               User            @relation(fields: [userId], references: [id])
  socialProfiles     SocialProfile[]
  contact            ContactData?
  location           Location?
  references         Reference[]
}

model Company {
  id                      String       @id @unique @default(cuid())
  name                    String       @unique
  logoURL                 String?
  employeeReferencesGiven Reference[]
  employeeWorkExperience  Experience[]
}

model Experience {
  id              String              @id @unique @default(cuid())
  company         Company?            @relation(fields: [companyId], references: [id])
  companyId       String
  role            String?
  roleDescription String?
  url             String?
  startDate       DateTime
  endDate         DateTime
  // create multiple descriptions that can be used depending on the context
  details         ExperienceDetails[]
}

model ExperienceDetails {
  id             String      @id @unique @default(cuid())
  summary        String
  highlights     String[]
  experienceId   String?
  workExperience Experience? @relation(fields: [experienceId], references: [id])
}

model Reference {
  id        String   @id @unique @default(cuid())
  from      String
  summary   String?
  url       String?
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id])
}

model SocialProfile {
  id        String   @id @unique @default(cuid())
  network   String
  username  String
  url       String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id])
}

model ContactData {
  id        String   @id @unique @default(cuid())
  phone     String?
  email     String?
  url       String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id])
}

model Location {
  id          String   @id @unique @default(cuid())
  address     String
  postalCode  String
  city        String
  countryCode String
  region      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  profileId   String?
  profile     Profile? @relation(fields: [profileId], references: [id])
}
